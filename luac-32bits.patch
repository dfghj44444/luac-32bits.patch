diff --git a/src/ldump.c b/src/ldump.c
--- a/src/ldump.c
+++ b/src/ldump.c
@@ -56,7 +56,8 @@ static void DumpByte (int y, DumpState *D) {
 
 
 static void DumpInt (int x, DumpState *D) {
-  DumpVar(x, D);
+  int32_t i = x;
+  DumpVar(i,D);
 }
 
 
diff --git a/src/luaconf.h b/src/luaconf.h
index f37bea0..b47c2dd 100755
--- a/src/luaconf.h
+++ b/src/luaconf.h
@@ -10,7 +10,8 @@
 
 #include <limits.h>
 #include <stddef.h>
-
+#include <stdint.h>
+#include <sys/types.h>
 
 /*
 ** ===================================================================
@@ -119,11 +120,8 @@
 /*
 ** 32-bit integers and 'float'
 */
-#if LUAI_BITSINT >= 32  /* use 'int' if big enough */
 #define LUA_INT_TYPE	LUA_INT_INT
-#else  /* otherwise use 'long' */
-#define LUA_INT_TYPE	LUA_INT_LONG
-#endif
+
 #define LUA_FLOAT_TYPE	LUA_FLOAT_FLOAT
 
 #elif defined(LUA_C89_NUMBERS)	/* }{ */
diff --git a/src/lundump.c b/src/lundump.c
index 4080af9..5c1e068 100755
--- a/src/lundump.c
+++ b/src/lundump.c
@@ -65,7 +65,7 @@ static lu_byte LoadByte (LoadState *S) {
 
 
 static int LoadInt (LoadState *S) {
-  int x;
+  int32_t x;
   LoadVar(S, x);
   return x;
 }
@@ -86,7 +86,7 @@ static lua_Integer LoadInteger (LoadState *S) {
 
 
 static TString *LoadString (LoadState *S) {
-  size_t size = LoadByte(S);
+  uint32_t size = LoadByte(S);
   if (size == 0xFF)
     LoadVar(S, size);
   if (size == 0)
@@ -240,8 +240,8 @@ static void checkHeader (LoadState *S) {
   if (LoadByte(S) != LUAC_FORMAT)
     error(S, "format mismatch in");
   checkliteral(S, LUAC_DATA, "corrupted");
-  checksize(S, int);
-  checksize(S, size_t);
+  checksize(S, int32_t);
+  checksize(S, uint32_t);
   checksize(S, Instruction);
   checksize(S, lua_Integer);
   checksize(S, lua_Number);
